using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;
using Skad.Common.Api.VulnerabilityFeed.Representations;

namespace VulnerabilityFeedLoader
{
    public class VulnerabilityFeedClient
    {
        private readonly HttpClient _httpClient;

        public VulnerabilityFeedClient(Uri baseAddress, bool skipVerifyCertificate)
        {
            var handler = new HttpClientHandler();

            if (skipVerifyCertificate)
            {
                handler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            }

            _httpClient = new HttpClient(handler);
            _httpClient.BaseAddress = baseAddress;
        }
        
        public async Task<(bool success, HttpStatusCode code, string msg)> AddOrUpdateVulnerability(FullVulnerabilityRep vulnerability)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };
            
            var content = JsonContent.Create(vulnerability, new MediaTypeHeaderValue("application/json"), options);
            var result = await _httpClient.PostAsync("api/vulnerabilities", content);
            var msg = await ReadBody(result);
            return (result.IsSuccessStatusCode, result.StatusCode, msg);
        }

        public async Task<(bool success, HttpStatusCode code, string msg)> AddVulnerabilityFeedComponent(string cpe)
        {
            var result = await _httpClient.PostAsync($"api/vulnerability-feeds?cpe={cpe}", new StreamContent(Stream.Null));
            var msg = await ReadBody(result);
            return (result.IsSuccessStatusCode, result.StatusCode, msg);
        }

        private async Task<string> ReadBody(HttpResponseMessage resp)
        {
            var reader = new StreamReader(await resp.Content.ReadAsStreamAsync());
            return await reader.ReadToEndAsync();
        }
    }
}