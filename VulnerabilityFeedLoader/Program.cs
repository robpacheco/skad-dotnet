using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace VulnerabilityFeedLoader
{
    class Program
    {
        private static readonly string[] Cpes = {
            "cpe:2.3:a:pivotal_software:spring_framework:*:*:*:*:*:*:*:*",
            "cpe:2.3:a:postgresql:postgresql:*:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:tomcat:*:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:*:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:airflow:*:*:*:*:*:*:*:*"
        };
        
        static async Task Main(string[] args)
        {
            var clusterUri = new Uri("https://localhost/vuln/");
            var devUri = new Uri("http://localhost:5000/");
            var client = new VulnerabilityFeedClient(clusterUri, true);

            await LoadVulnerabilities(client);
            await LoadVulnerabilityFeed(client);
        }

        private static async Task LoadVulnerabilities(VulnerabilityFeedClient client)
        {
            var dataReader = new VulnerabilityDataReader();
            var vulns = await dataReader.ReadVulnerabilityData("data/skad-cves.json");

            if (vulns?.Vulnerabilities == null)
            {
                Console.WriteLine("ERROR: Could not read vulnerabilities.");
                return;
            }
            
            var errors = new List<string>();

            foreach (var vuln in vulns.Vulnerabilities)
            {
                var (success, status, msg) = await client.AddOrUpdateVulnerability(vuln);

                if (!success)
                {
                    errors.Add($"{vuln.CveId}: ({status}) {msg}");
                }
                
                Console.Write(success ? "." : "x");
            }

            Console.WriteLine();
            Console.WriteLine($"{vulns.Vulnerabilities.Count - errors.Count} CVEs Successfully Added.");
            Console.WriteLine($"{errors.Count} CVEs Failed.");
            
            OutputErrors(errors);
        }

        private static async Task LoadVulnerabilityFeed(VulnerabilityFeedClient client)
        {
            var errors = new List<string>();

            foreach (var cpe in Cpes)
            {
                var (success, status, msg) = await client.AddVulnerabilityFeedComponent(cpe);

                if (!success)
                {
                    errors.Add($"{cpe}: ({status}) {msg}");
                }

                Console.Write(success ? "." : "x");
            }

            Console.WriteLine();
            Console.WriteLine($"{Cpes.Length - errors.Count} CPEs Successfully Added.");
            Console.WriteLine($"{errors.Count} CPEs Failed.");

            OutputErrors(errors);
        }
        
        private static void OutputErrors(IList<string> errors)
        {
            if (errors.Any())
            {
                Console.WriteLine("Errors:");
                Console.WriteLine("--------------------------------------------------------------------------------------");

                foreach (var error in errors)
                {
                    Console.WriteLine($"* {error}");
                }

                Console.WriteLine("--------------------------------------------------------------------------------------");
            }
        }
    }
}