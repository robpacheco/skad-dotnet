using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Skad.Common.Api.Common.Representations;
using Skad.Common.Api.VulnerabilityFeed.Representations;
using Skad.VulnFeed.ApiControllers.Endpoints;
using Skad.VulnFeed.ApiControllers.Extensions;
using Skad.VulnFeed.Domain.Service;

namespace Skad.VulnFeed.ApiControllers
{
    [ApiController]
    [Route("api/vulnerabilities")]
    public class VulnerabilityController : Controller
    {
        private readonly IVulnerabilityFeedService _vulnerabilityFeedService;
        private readonly VulnerabilityFeedEndpoints _endpoints;

        public VulnerabilityController(IVulnerabilityFeedService vulnerabilityFeedService, VulnerabilityFeedEndpoints endpoints)
        {
            _vulnerabilityFeedService = vulnerabilityFeedService ?? throw new ArgumentNullException(nameof(vulnerabilityFeedService));
            _endpoints = endpoints ?? throw new ArgumentNullException(nameof(endpoints));
        }

        [HttpGet]
        public async Task<ActionResult<FullVulnerabilityRep>> GetVulnerabilities([FromQuery] string? cveId, [FromQuery] int pageNum = 1, [FromQuery] int pageSize = 25)
        {
            var pageError = CheckPagingParameters(pageNum, pageSize);

            if (pageError != null)
            {
                return BadRequest(pageError);
            }

            var (_, vulns) = await _vulnerabilityFeedService.GetVulnerabilities(cveId, pageNum, pageSize);
            var rep = vulns.Select(v => v.FromDomain(_endpoints)).ToList();
            var page = new ApiPage<FullVulnerabilityRep>(rep);
            
            return Ok(page);
        }

        [HttpPost]
        public async Task<ActionResult> CreateVulnerability([FromBody] FullVulnerabilityRep vulnRep)
        {
            var vulnEntity = vulnRep.ToVulnerability();
            var vuln = await _vulnerabilityFeedService.AddOrUpdateVulnerability(vulnEntity);
            return Ok(vuln.FromDomain(_endpoints));
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<FullVulnerabilityRep>> GetVulnerability([FromRoute] long id)
        {
            var vulnerability = await _vulnerabilityFeedService.GetVulnerability(id);

            if (vulnerability == null)
            {
                return NotFound();
            }
            
            return Ok(vulnerability.FromDomain(_endpoints));
        }

        private static ApiErrorRep? CheckPagingParameters(int pageNum, int pageSize)
        {
            if (pageNum < 1)
            {
                return new ApiErrorRep("Parameters 'pageNum' must be at least 1");
            }

            if (pageSize < 1)
            {
                return new ApiErrorRep("Parameters 'pageSize' must be at least 1");
            }

            return null;
        }
    }
}