using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Skad.Common.Http;
using Skad.VulnFeed.Domain.Service;
using Skad.VulnFeed.MvcControllers.Extensions;
using Skad.VulnFeed.MvcControllers.ViewModels;

namespace Skad.VulnFeed.MvcControllers
{
    [Route("vulnerability-feed")]
    public class VulnerabilityFeedController : Controller
    {
        private readonly IVulnerabilityFeedService _vulnerabilityFeedService;
        private readonly LinkGenerator _linkGenerator;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public VulnerabilityFeedController(IVulnerabilityFeedService vulnerabilityFeedService, LinkGenerator linkGenerator, IHttpContextAccessor httpContextAccessor)
        {
            _vulnerabilityFeedService = vulnerabilityFeedService ?? throw new ArgumentNullException(nameof(vulnerabilityFeedService));
            _linkGenerator = linkGenerator ?? throw new ArgumentNullException(nameof(linkGenerator));
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
        }

        [Authorize]
        public async Task<IActionResult> Index(int pageNum=1, int pageSize=50)
        {
            var username = _httpContextAccessor.HttpContext.User.Identity.Name;
            var (pageInfo, summaries) = await _vulnerabilityFeedService.GetVulnerabilityFeedItems(pageNum, pageSize);
            var model = new VulnerabilityFeedIndexModel(_linkGenerator, summaries.Select(v => v.ToVulnerabilityFeedItem()), pageInfo, username);
            
            return View("VulnFeed", model);
        }
    }
}