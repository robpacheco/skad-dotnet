using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Skad.Common.Http;
using Skad.VulnFeed.Domain.Service;
using Skad.VulnFeed.MvcControllers.ViewModels;

namespace Skad.VulnFeed.MvcControllers;

[Route("/")]
public class LoginLogoutController : Controller
{
    private readonly ILoginService _login;
    private readonly LinkGenerator _linkGenerator;

    public LoginLogoutController(ILoginService login, LinkGenerator linkGenerator)
    {
        _login = login ?? throw new ArgumentNullException(nameof(login));
        _linkGenerator = linkGenerator ?? throw new ArgumentNullException(nameof(linkGenerator));
    }

    [HttpGet("login")]
    public async Task<IActionResult> GetLogin()
    {
        return View("Login", new UserPasswordModel());
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login(UserPasswordModel model)
    {
        if (!ModelState.IsValid)
        {
            return View("Login", new UserPasswordModel());
        }
        
        bool valid = _login.Login(model.Username, model.Password);
        
        if (!valid)
        {
            ModelState.AddModelError(string.Empty, "Invalid username or password.");
            return View("Login", new UserPasswordModel());
        }
        
        AddAuthCookie(model.Username);
        
        return Redirect(_linkGenerator.GenerateVulnerabilityFeedUri("vulnerability-feed").ToString());
    }

    private async Task AddAuthCookie(string username)
    {
        var claims = new List<Claim> { new(ClaimTypes.Name, username) };
        var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        
        await HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme, 
            new ClaimsPrincipal(claimsIdentity));
    }

    [HttpGet("logout")]
    public async Task<IActionResult> Logout()
    {
        await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        return View("Login", new UserPasswordModel());
    }
}