using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpOverrides;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Serilog;
using Skad.Common.Db;
using Skad.Common.Http;
using Skad.VulnFeed.ApiControllers.Endpoints;
using Skad.VulnFeed.Data;
using Skad.VulnFeed.Data.Model;
using Skad.VulnFeed.Domain.Repository;
using Skad.VulnFeed.Domain.Service;

namespace Skad.VulnFeed
{
    public class Startup
    {
        private static string ENDPOINT_SETTINGS_SECTION = "EndpointSettings";

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            SetupLogging();
            
            services.AddMvc();
            services.AddControllers();

            services.Configure<EndpointSettings>(Configuration.GetSection(ENDPOINT_SETTINGS_SECTION));

            services.AddScoped<IVulnerabilityFeedRepository, VulnerabilityFeedRepository>();
            
            services.AddScoped<IVulnerabilityFeedService, VulnerabilityFeedService>();
            services.AddSingleton<Migrations>();

            services.AddHttpContextAccessor();
            services.AddScoped<LinkGenerator>();
            services.AddScoped<VulnerabilityFeedEndpoints>();

            services.Configure<ForwardedHeadersOptions>(options =>
            {
                options.ForwardedHeaders =
                     ForwardedHeaders.All;
            });
            
            services.AddDbContext<VulnFeedDbContext>(options =>
            {
                options.UseNpgsql(Configuration.GetConnectionString("DefaultConnection"));
            });
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            app.UseForwardedHeaders();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                app.UseHsts();
            }

            loggerFactory.AddSerilog();
            
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }

        private void SetupLogging()
        {
            Log.Logger = new LoggerConfiguration()
                .ReadFrom
                .Configuration(Configuration)
                .CreateLogger();
        }
    }
}
