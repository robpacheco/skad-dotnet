using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Skad.Common.Api.Common;
using Skad.VulnFeed.Data.Model;
using Skad.VulnFeed.Domain.Repository;

namespace Skad.VulnFeed.Data
{
    public class VulnerabilityFeedRepository : IVulnerabilityFeedRepository
    {
        private readonly VulnFeedDbContext _context;
        private readonly ILogger<VulnerabilityFeedRepository> _logger;

        public VulnerabilityFeedRepository(VulnFeedDbContext context, ILogger<VulnerabilityFeedRepository> logger)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task<Vulnerability?> FindVulnerabilityById(long id)
        {
            var vulnerability = await _context.Vulnerabilities
                .AsNoTracking()
                .Include(v => v.VulnerableComponentSummaries)
                .ThenInclude(v => v.Component)
                .Where(v => v.VulnerabilityId == id)
                .SingleOrDefaultAsync();
            
            return vulnerability;
        }

        public async Task<(PageInfo pageInfo, List<Vulnerability> vulnerabilities)> GetVulnerabilitiesWithFilter(string? cveId, int pageNum, int pageSize)
        {
            var totalItems = _context.Vulnerabilities.Count();
            var pageInfo = new PageInfo(totalItems, pageNum, pageSize);

            IQueryable<Vulnerability> query = _context.Vulnerabilities
                .AsNoTracking()
                .Include(v => v.VulnerableComponentSummaries)
                .ThenInclude(v => v.Component);

            if (cveId != null)
            {
                query = query.Where(v => v.CveId == cveId);
            }

            query = query.OrderByDescending(x => x.CveId);
            query = Page(query, pageNum, pageSize);
            var vulnerabilities = await query.ToListAsync();
            return (pageInfo, vulnerabilities);
        }
        
        public async Task<(PageInfo pageInfo, List<VulnerableComponentSummary> vulnerabilities)> GetVulnerabilityFeedItems(int pageNum, int pageSize)
        {
            var componentIds = await _context.VulnerabilityFeedComponents.Select(f => f.ComponentId).ToListAsync();
            var totalItems = _context.VulnerableComponentSummaries.AsNoTracking().Count(a => componentIds.Contains(a.ComponentId));
            var pageInfo = new PageInfo(totalItems, pageNum, pageSize);

            IQueryable<VulnerableComponentSummary> query = _context.VulnerableComponentSummaries
                .AsNoTracking()
                .Where(a => componentIds.Contains(a.ComponentId))
                .Include(a => a.Vulnerability)
                .Include(v => v.Component);
            
            query = query.OrderByDescending(x => x.Vulnerability.CveId);
            query = Page(query, pageNum, pageSize);
            var vulnerabilities = await query.ToListAsync();
            return (pageInfo, vulnerabilities);
        }
        
        public async Task<Vulnerability> AddOrUpdateVulnerability(Vulnerability vulnerability)
        {
            var existingVulnerability = await _context.Vulnerabilities
                .Include(v => v.VulnerableComponentSummaries)
                .Where(v => v.CveId == vulnerability.CveId)
                .FirstOrDefaultAsync();
            
            var existingComponents = await FindComponentsMapByCpe(vulnerability.VulnerableComponentSummaries.Select(c => c.Component.ComponentCpe));
            var (vulnerabilityEntity, vulnerabilityAdded) = await UpsertVulnerability(existingVulnerability, vulnerability);
            await UpsertSummaries(vulnerabilityEntity, existingComponents, vulnerability.VulnerableComponentSummaries.ToList(), vulnerabilityAdded);
            
            await _context.SaveChangesAsync();
            return vulnerabilityEntity;
        }
        
        public async Task AddComponentToFeed(string cpe)
        {
            var comp = await _context.Components
                .Include(c => c.VulnerabilityFeedComponents)
                .Where(c => c.ComponentCpe == cpe)
                .FirstOrDefaultAsync();

            if (comp == null)
            {
                _logger.LogError($"Component not found with CPE: {cpe}");
                return;
            }

            if (comp.VulnerabilityFeedComponents.Any())
            {
                return; // Already exists
            }

            _context.VulnerabilityFeedComponents.Add(new VulnerabilityFeedComponent
            {
                ComponentId = comp.ComponentId
            });

            await _context.SaveChangesAsync();
        }

        public async Task RemoveComponentFromFeed(string cpe)
        {
            var comp = await _context.Components
                .Include(c => c.VulnerabilityFeedComponents)
                .Where(c => c.ComponentCpe == cpe)
                .FirstOrDefaultAsync();

            if (comp == null)
            {
                return;
            }

            if (!comp.VulnerabilityFeedComponents.Any())
            {
                return; // Not in feed
            }

            _context.VulnerabilityFeedComponents.RemoveRange(comp.VulnerabilityFeedComponents);
            await _context.SaveChangesAsync();
        }

        private async Task<Dictionary<string, Component>> FindComponentsMapByCpe(IEnumerable<string> cpes)
        {
            return await _context.Components
                .Where(c => cpes.Contains(c.ComponentCpe))
                .ToDictionaryAsync(c => c.ComponentCpe, c => c);
        }
        
        private (Component component, bool added) UpsertComponent(Dictionary<string, Component> existingComponents, Component component)
        {
            Component newOrUpdatedComponent = existingComponents.TryGetValue(component.ComponentCpe, out var existingComponent) 
                ? existingComponent 
                : new Component();
                
            var add = existingComponent == null;
            newOrUpdatedComponent.ComponentCpe = component.ComponentCpe;
            newOrUpdatedComponent.ComponentName = component.ComponentName;
                
            if (add)
            {
                existingComponents.Add(newOrUpdatedComponent.ComponentCpe, newOrUpdatedComponent);
                _context.Add(newOrUpdatedComponent);
            }

            return (newOrUpdatedComponent, add);
        }

        private async Task UpsertSummaries(Vulnerability vulnerability, Dictionary<string, Component> existingComponents, IEnumerable<VulnerableComponentSummary> summaries, bool newVulnerability)
        {
            foreach (var summary in summaries)
            {
                var (component, componentAdded) = UpsertComponent(existingComponents, summary.Component);
        
                await _context.SaveChangesAsync();
        
                if (componentAdded || newVulnerability)
                {
                    _context.VulnerableComponentSummaries.Add(new VulnerableComponentSummary()
                    {
                        ComponentId = component.ComponentId,
                        VulnerabilityId = vulnerability.VulnerabilityId,
                        LatestVulnerableVersionName = summary.LatestVulnerableVersionName,
                        VulnerableVersionCount = summary.VulnerableVersionCount
                    });
                }
            }
        
            await _context.SaveChangesAsync();
        }
        
        private async Task<(Vulnerability vulnerability, bool added)> UpsertVulnerability(Vulnerability? existingVulnerability, Vulnerability vuln)
        {
            var vulnerability = existingVulnerability ?? new Vulnerability();
            var add = existingVulnerability == null;

            vulnerability.CveId = vuln.CveId;
            vulnerability.Description = vuln.Description;
            vulnerability.ScoreCvss3 = vuln.ScoreCvss3;
            vulnerability.SeverityCvss3 = vuln.SeverityCvss3;
            vulnerability.ScoreCvss2 = vuln.ScoreCvss2;
            vulnerability.SeverityCvss2 = vuln.SeverityCvss2;
            
            if (add)
            {
                _context.Add(vulnerability);
            }

            await _context.SaveChangesAsync();
            return (vulnerability, add);
        }

        private static IQueryable<T> Page<T>(IQueryable<T> query, int pageNum, int pageSize)
        {
            return query.Skip((pageNum - 1) * pageSize).Take(pageSize);
        }
    }
}